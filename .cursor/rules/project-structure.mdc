---
description: 
globs: 
alwaysApply: true
---
# プロジェクト構成ガイド

本リポジトリは Hono (API) + React (SSR) を用いたポートフォリオ & ブログサイトです。
主要なエントリポイントやコンポーネントの関係を以下に示します。

## アーキテクチャ
- サーバー側で React コンポーネントを静的 HTML として生成（@hono/react-renderer）
- クライアント側では `src/client.tsx` を **TypeScript (Vanilla JS)** として読み込み、
  必要なインタラクションだけを DOM 操作または小規模な React ツリー（ギャラリーモーダル）で実装
- エッジでの実行により高速なレスポンスを実現
- **React**: UI コンポーネント（SSRのみ、フルハイドレーションは行わず *必要箇所のみ* クライアントJSで制御）

## サーバエントリポイント
- [index.tsx](mdc:src/index.tsx)  
  ルーティングの定義と各ページのレンダリングを行います。  
  Hono を使用して `/`, `/blog`, `/blog/:id`, `/blog/summary/:yearMonth`, `/about` を提供します。

## 共通レンダラー
- [renderer.tsx](mdc:src/renderer.tsx)  
  `@hono/react-renderer` の `reactRenderer` で HTML テンプレートを組み立て、共通 `<head>` と `<body>` を定義します。
  `<script type="module" src="/src/client.tsx"></script>` でクライアントスクリプトを読み込みます。

## クライアントサイドスクリプト
- [client.tsx](mdc:src/client.tsx)  
  ブラウザ側で実行される処理を定義しています。
  - ギャラリーモーダルの機能（小規模 React ツリーを使用）
  - About ページのプロフィール切り替え機能
  - 文字起こしトグル機能
  - 分析タブの切り替え機能
  - その他軽量インタラクション（React コンポーネントの `onClick` はサーバーサイドレンダリングのみで、クライアント側では DOM 操作で実装）

## レイアウト
- [Layout.tsx](mdc:src/components/Layout.tsx)  
  全ページ共通のヘッダー・フッター・ナビゲーションを提供します。

## ページ／セクションコンポーネント
| パス | 役割 |
| --- | --- |
| [Introduction.tsx](mdc:src/components/Introduction.tsx) | トップページの自己紹介セクション |
| [Model.tsx](mdc:src/components/Model.tsx) | 3D モデルの表示 |
| [Gallery.tsx](mdc:src/components/Gallery.tsx) | 作品ギャラリーの一覧 |
| [Blog.tsx](mdc:src/components/Blog.tsx) | ブログ記事一覧 |
| [BlogDetail.tsx](mdc:src/components/BlogDetail.tsx) | 記事詳細（最新版） |
| [BlogDetailV1.tsx](mdc:src/components/BlogDetailV1.tsx) ~ V3 | 過去バージョンの詳細ページ |
| [MonthlySummary.tsx](mdc:src/components/MonthlySummary.tsx) | 月別サマリー |
| [About.tsx](mdc:src/components/About.tsx) | プロフィールページ（見た目は React で定義、機能は client.tsx で実装） |

## 静的アセット
`/public` 配下の画像・スタイル・JS を Hono の `serveStatic` で `/images/*` と `/static/*` に公開しています。

## スタイル
Tailwind CSS を使用し、設定は [tailwind.config.js](mdc:tailwind.config.js)、PostCSS 設定は [postcss.config.js](mdc:postcss.config.js) にあります。

## ビルド／開発
- Vite 設定: [vite.config.ts](mdc:vite.config.ts)
- Wrangler 設定 (Cloudflare): [wrangler.toml](mdc:wrangler.toml)

## 環境変数
| 変数名 | 用途 |
| ------- | ---- |
| `VITE_SUPABASE_URL` | Supabase プロジェクトの URL |
| `VITE_SUPABASE_ANON_KEY` | Supabase 公開 anon キー |

Cloudflare Pages の **Environment variables** に Production / Preview それぞれ設定する必要があります。

このルールを参照することで、主要ファイルの位置と役割を素早く把握できます。
